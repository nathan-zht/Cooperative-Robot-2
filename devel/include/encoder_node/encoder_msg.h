// Generated by gencpp from file encoder_node/encoder_msg.msg
// DO NOT EDIT!


#ifndef ENCODER_NODE_MESSAGE_ENCODER_MSG_H
#define ENCODER_NODE_MESSAGE_ENCODER_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace encoder_node
{
template <class ContainerAllocator>
struct encoder_msg_
{
  typedef encoder_msg_<ContainerAllocator> Type;

  encoder_msg_()
    : ticks(0)
    , direction(0)  {
    }
  encoder_msg_(const ContainerAllocator& _alloc)
    : ticks(0)
    , direction(0)  {
  (void)_alloc;
    }



   typedef int32_t _ticks_type;
  _ticks_type ticks;

   typedef int8_t _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::encoder_node::encoder_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::encoder_node::encoder_msg_<ContainerAllocator> const> ConstPtr;

}; // struct encoder_msg_

typedef ::encoder_node::encoder_msg_<std::allocator<void> > encoder_msg;

typedef boost::shared_ptr< ::encoder_node::encoder_msg > encoder_msgPtr;
typedef boost::shared_ptr< ::encoder_node::encoder_msg const> encoder_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::encoder_node::encoder_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::encoder_node::encoder_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace encoder_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'encoder_node': ['/home/xillinux/cobot/catkin_ws/src/encoder_node/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::encoder_node::encoder_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::encoder_node::encoder_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::encoder_node::encoder_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::encoder_node::encoder_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::encoder_node::encoder_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::encoder_node::encoder_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::encoder_node::encoder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e36c3dcce149655ed1ec27c09a76291";
  }

  static const char* value(const ::encoder_node::encoder_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e36c3dcce149655ULL;
  static const uint64_t static_value2 = 0xed1ec27c09a76291ULL;
};

template<class ContainerAllocator>
struct DataType< ::encoder_node::encoder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "encoder_node/encoder_msg";
  }

  static const char* value(const ::encoder_node::encoder_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::encoder_node::encoder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ticks\n\
int8  direction\n\
";
  }

  static const char* value(const ::encoder_node::encoder_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::encoder_node::encoder_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ticks);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct encoder_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::encoder_node::encoder_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::encoder_node::encoder_msg_<ContainerAllocator>& v)
  {
    s << indent << "ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ticks);
    s << indent << "direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ENCODER_NODE_MESSAGE_ENCODER_MSG_H
